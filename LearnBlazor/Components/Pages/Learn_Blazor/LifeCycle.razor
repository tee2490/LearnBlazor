@page "/lifecycle"

<PageTitle>Life Cycle</PageTitle>

<h3 class="text-success">Blazor LifeCycle</h3>

<p role="status">Current count: @currentCount</p>
<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<div class="border">
    <_LifeCycleChildComponent CountValue="@currentCount"></_LifeCycleChildComponent>
</div>

@foreach (var item in EventType)
{
    <p>@item</p>
    <hr />
}


@code {
    int round = 0;
    private int currentCount = 0;
    List<string> EventType = new List<string>();

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1500);
        EventType.Add("OnInitializedAsync is called");
    }

    protected override void OnInitialized()
    {
        EventType.Add("OnInitialized is called");
    }

    protected override void OnParametersSet()
    {
        EventType.Add("OnParametersSet is called");
    }

    protected override async Task OnParametersSetAsync()
    {
        await Task.Delay(1500);
        EventType.Add("OnParametersSetAsync is called");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            currentCount = 111;
        }
        else
        {
            currentCount = 999;
        }
        EventType.Add($"OnAfterRender is called {currentCount}....[{firstRender}] {++round}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add($"OnAfterRenderAsync is called {currentCount}....[{firstRender}]");
    }

}